{
  "projectId": "c32769af-72ed-4764-bd27-550d46f14bc5",
  "projectName": "vibeman",
  "scanType": "feature_scout",
  "provider": "ollama",
  "contextId": "a9da1e64-e644-4070-9525-37b52cedbbd7",
  "projectPath": "C:\\Users\\kazda\\kiro\\vibeman",
  "codebaseFiles": [
    {
      "path": "next-env.d.ts",
      "content": "/// <reference types=\"next\" />\r\n/// <reference types=\"next/image-types/global\" />\r\nimport \"./.next/types/routes.d.ts\";\r\n\r\n// NOTE: This file should not be edited\r\n// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.\r\n",
      "type": "typescript"
    },
    {
      "path": "next.config.ts",
      "content": "import type { NextConfig } from \"next\";\r\n\r\nconst nextConfig: NextConfig = {\r\n  /* config options here */\r\n};\r\n\r\nexport default nextConfig;\r\n",
      "type": "typescript"
    },
    {
      "path": "src\\app\\annette\\ChatDialog.tsx",
      "content": "ï»¿'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Brain } from 'lucide-react';\nimport AnnetteChatBackground from './components/AnnetteChatBackground';\nimport AnnetteChatHeader from './components/AnnetteChatHeader';\nimport AnnetteChatInput from './components/AnnetteChatInput';\nimport TypewriterMessage from '../voicebot/components/TypewriterMessage';\nimport { OllamaClient } from '@/lib/llm/providers/ollama-client';\nimport { Project } from '@/types';\n\ninterface ChatDialogProps {\n  selectedProject?: Project;\n  onSendMessage?: (message: string) => Promise<{ response: string; [key: string]: unknown }>;\n  isProcessing?: boolean;\n}\n\nconst ChatDialog = ({ selectedProject, isProcessing = false }: ChatDialogProps) => {\n  const [inputValue, setInputValue] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [audioLevels, setAudioLevels] = useState<number[]>(Array(12).fill(0));\n  const [isAudioActive, setIsAudioActive] = useState(false);\n  const [currentResponse, setCurrentResponse] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const audioAnimationRef = useRef<number | undefined>(undefined);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const ollamaClientRef = useRef(new OllamaClient());\n\n  // Audio levels animation\n  useEffect(() => {\n    if (isAudioActive || isListening || isProcessing) {\n      const animateAudio = () => {\n        setAudioLevels(prev => prev.map(() => \n          Math.random() * (isListening ? 100 : isProcessing ? 60 : 30)\n        ));\n        audioAnimationRef.current = requestAnimationFrame(animateAudio);\n      };\n      animateAudio();\n    } else {\n      if (audioAnimationRef.current) {\n        cancelAnimationFrame(audioAnimationRef.current);\n      }\n      setAudioLevels(Array(12).fill(0));\n    }\n\n    return () => {\n      if (audioAnimationRef.current) {\n        cancelAnimationFrame(audioAnimationRef.current);\n      }\n    };\n  }, [isAudioActive, isListening, isProcessing]);\n\n  const startVoiceRecording = async () => {\n    if (!selectedProject) return;\n    try {\n      setIsListening(true);\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: { echoCancellation: true, noiseSuppression: true, autoGainControl: true }\n      });\n\n      audioContextRef.current = new (window.AudioContext || (window as typeof window & { webkitAudioContext: typeof AudioContext }).webkitAudioContext)();\n      if (audioContextRef.current.state === 'suspended') await audioContextRef.current.resume();\n\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      const source = audioContextRef.current.createMediaStreamSource(stream);\n      source.connect(analyserRef.current);\n\n      analyserRef.current.fftSize = 512;\n      const bufferLength = analyserRef.current.frequencyBinCount;\n      const dataArray = new Uint8Array(bufferLength);\n\n      let lastSoundTime = Date.now();\n      const checkAudioLevel = () => {\n        if (analyserRef.current && isListening) {\n          analyserRef.current.getByteFrequencyData(dataArray);\n          let sum = 0;\n          for (let i = 0; i < bufferLength; i++) sum += dataArray[i] * dataArray[i];\n          const normalizedLevel = Math.sqrt(sum / bufferLength) / 255;\n\n          if (normalizedLevel > 0.02) lastSoundTime = Date.now();\n          else if (Date.now() - lastSoundTime > 3000) { stopVoiceRecording(); return; }\n\n          requestAnimationFrame(checkAudioLevel);\n        }\n      };\n      checkAudioLevel();\n\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      const audioChunks: Blob[] = [];\n      mediaRecorderRef.current.ondataavailable = (event) => audioChunks.push(event.data);\n      mediaRecorderRef.current.onstop = async () => {\n        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });\n        await processVoiceInput(audioBlob);\n        stream.getTracks().forEach(track => track.stop());\n      };\n      mediaRecorderRef.current.start();\n    } catch (error) {\n      console.error('Error starting recording:', error);\n      setIsListening(false);\n    }\n  };\n\n  const stopVoiceRecording = () => {\n    if (mediaRecorderRef.current && isListening) {\n      mediaRecorderRef.current.stop();\n      setIsListening(false);\n      if (audioContextRef.current) audioContextRef.current.close();\n    }\n  };\n\n  const processVoiceInput = async (audioBlob: Blob) => {\n    setIsLoading(true);\n    setCurrentResponse('');\n    try {\n      const formData = new FormData();\n      formData.append('audio', audioBlob);\n      const sttResponse = await fetch('/api/voicebot/speech-to-text', { method: 'POST', body: formData });\n      if (!sttResponse.ok) throw new Error('Speech-to-text failed');\n      const sttData = await sttResponse.json();\n      setInputValue(sttData.text);\n      await handleSendMessage(sttData.text);\n    } catch (error) {\n      console.error('Voice processing error:', error);\n      setIsLoading(false);\n      setCurrentResponse('Error processing voice input. Please try again.');\n    }\n  };\n\n  const handleSendMessage = async (messageText?: string) => {\n    const userMessage = messageText || inputValue.trim();\n    if (!userMessage || !selectedProject) return;\n\n    setInputValue('');\n    setIsLoading(true);\n    setCurrentResponse('');\n\n    try {\n      const response = await ollamaClientRef.current.generate({\n        prompt: `You are a helpful AI assistant analyzing the project \"${selectedProject.name}\". Respond concisely to: ${userMessage}`,\n        model: 'gpt-oss:20b',\n        projectId: selectedProject.id,\n        taskType: 'chat',\n        taskDescription: 'User chat message'\n      });\n\n      if (response.success && response.response) {\n        setCurrentResponse(response.response);\n        setIsLoading(false);\n        await generateTextToSpeech(response.response);\n      } else {\n        throw new Error(response.error || 'Failed to generate response');\n      }\n    } catch (error) {\n      console.error('Message processing error:', error);\n      setIsLoading(false);\n      setCurrentResponse('Error: ' + (error instanceof Error ? error.message : 'Unknown error'));\n    }\n  };\n\n  const generateTextToSpeech = async (text: string) => {\n    try {\n      setIsAudioActive(true);\n      const response = await fetch('/api/voicebot/text-to-speech', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ text })\n      });\n\n      if (response.ok) {\n        const audioBlob = await response.blob();\n        const audioUrl = URL.createObjectURL(audioBlob);\n        const audio = new Audio(audioUrl);\n        audio.onended = () => { setIsAudioActive(false); URL.revokeObjectURL(audioUrl); };\n        await audio.play().catch(console.error);\n      } else {\n        setIsAudioActive(false);\n      }\n    } catch (error) {\n      console.error('TTS error:', error);\n      setIsAudioActive(false);\n    }\n  };\n\n  const toggleListening = () => {\n    if (isListening) stopVoiceRecording();\n    else startVoiceRecording();\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"flex flex-col h-full relative overflow-hidden\"\n    >\n      <AnnetteChatBackground />\n      <div className=\"relative z-10 flex flex-col h-full border border-cyan-500/20 rounded-2xl shadow-2xl shadow-slate-500/10\">\n        <AnnetteChatHeader\n          selectedProject={selectedProject}\n          isProcessing={isProcessing || isLoading}\n          isListening={isListening}\n          audioLevels={audioLevels}\n          isAudioActive={isAudioActive}\n        />\n        <div className=\"flex-1 p-6 flex items-center justify-center relative\">\n          <motion.div\n            className=\"absolute inset-0 pointer-events-none\"\n            style={{\n              background: `repeating-linear-gradient(0deg, transparent, transparent 2px, rgba(0, 255, 255, 0.03) 2px, rgba(0, 255, 255, 0.03) 4px)`\n            }}\n            animate={{ backgroundPosition: ['0px 0px', '0px 20px'] }}\n            transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n          />\n\n          <AnimatePresence mode=\"wait\">\n            {!currentResponse && !isLoading ? (\n              <motion.div key=\"idle\" initial={{ opacity: 0, scale: 0.9 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.9 }} className=\"flex flex-col items-center text-center\">\n                <motion.div className=\"relative mb-8\" animate={{ y: [0, -10, 0] }} transition={{ duration: 4, repeat: Infinity }}>\n                  <motion.div animate={{ rotate: [0, 360] }} transition={{ duration: 20, repeat: Infinity, ease: \"linear\" }}>\n                    <Brain className=\"w-20 h-20 text-cyan-400/60\" />\n                  </motion.div>\n                  {Array.from({ length: 3 }).map((_, i) => (\n                    <motion.div key={i} className=\"absolute inset-0 flex items-center justify-center\" animate={{ rotate: [0, 360] }} transition={{ duration: 8 + i * 2, repeat: Infinity, ease: \"linear\", delay: i * 0.5 }}>\n                      <motion.div className={`w-2 h-2 rounded-full ${i === 0 ? 'bg-cyan-400' : i === 1 ? 'bg-slate-400' : 'bg-blue-400'}`} style={{ transform: `translateX(${40 + i * 10}px)` }} animate={{ scale: [1, 1.5, 1], opacity: [0.5, 1, 0.5] }} transition={{ duration: 2, repeat: Infinity, delay: i * 0.3 }} />\n                    </motion.div>\n                  ))}\n                </motion.div>\n                <motion.h4 className=\"text-2xl font-bold bg-gradient-to-r from-cyan-400 to-slate-400 bg-clip-text text-transparent mb-3\" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.5 }}>\n                  NEURAL INTERFACE ACTIVE\n                </motion.h4>\n                <motion.p className=\"text-cyan-300/60 max-w-md font-mono text-sm\" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.7 }}>\n                  {`>`} Quantum processing ready<br/>{`>`} Multi-dimensional analysis enabled<br/>{`>`} Project intelligence systems online<br/>\n                  <motion.span animate={{ opacity: [0, 1, 0] }} transition={{ duration: 1, repeat: Infinity }}>\n                    {`>`} Awaiting neural input...\n                  </motion.span>\n                </motion.p>\n              </motion.div>\n            ) : isLoading ? (\n              <motion.div key=\"loading\" initial={{ opacity: 0, scale: 0.9 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.9 }}>\n                <motion.div className=\"p-8 rounded-2xl bg-gradient-to-br from-slate-600/20 via-blue-600/10 to-slate-800/20 border border-slate-400/30 backdrop-blur-sm\" animate={{ boxShadow: [\"0 0 20px rgba(99, 102, 241, 0.3)\", \"0 0 40px rgba(99, 102, 241, 0.5)\", \"0 0 20px rgba(99, 102, 241, 0.3)\"] }} transition={{ duration: 2, repeat: Infinity }}>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-slate-400 to-blue-500 p-0.5\">\n                      <div className=\"w-full h-full rounded-full bg-gray-900 flex items-center justify-center\">\n                        <motion.div animate={{ rotate: 360 }} transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}>\n                          <Brain className=\"w-8 h-8 text-slate-400\" />\n                        </motion.div>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col space-y-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-lg font-mono text-slate-300 uppercase tracking-wider\">Neural Processing</span>\n                        <motion.div animate={{ opacity: [0, 1, 0] }} transition={{ duration: 1, repeat: Infinity }} className=\"w-3 h-3 bg-slate-400 rounded-full\" />\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        {Array.from({ length: 12 }).map((_, i) => (\n                          <motion.div key={i} className=\"w-1.5 h-1.5 bg-gradient-to-r from-cyan-400 to-slate-400 rounded-full\" animate={{ scale: [0.5, 1.5, 0.5], opacity: [0.3, 1, 0.3] }} transition={{ duration: 1.5, repeat: Infinity, delay: i * 0.1 }} />\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </motion.div>\n              </motion.div>\n            ) : (\n              <motion.div key=\"response\" initial={{ opacity: 0, scale: 0.9 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.9 }} className=\"max-w-3xl w-full\">\n                <TypewriterMessage message={currentResponse} speed={30} />\n              </motion.div>\n            )}\n          </AnimatePresence>\n          \n          <div ref={messagesEndRef} />\n        </div>\n        <AnnetteChatInput\n          inputValue={inputValue}\n          onInputChange={setInputValue}\n          onSendMessage={handleSendMessage}\n          onKeyPress={handleKeyPress}\n          isListening={isListening}\n          onToggleListening={toggleListening}\n          selectedProject={selectedProject}\n          isProcessing={isProcessing || isLoading}\n          inputRef={inputRef as React.RefObject<HTMLInputElement>}\n        />\n      </div>\n    </motion.div>\n  );\n};\n\nexport default ChatDialog;\n",
      "type": "typescript"
    },
    {
      "path": "src\\app\\Claude\\ClaudeLogViewer.tsx",
      "content": "'use client';\nimport React, { useState, useEffect } from 'react';\nimport { FileText, Download, RefreshCw } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { useRetryErrorHandler } from '@/hooks/useErrorHandler';\nimport { InlineErrorDisplay } from '@/components/errors/ErrorBoundary';\n\ninterface ClaudeLogViewerProps {\n  logFilePath: string;\n  requirementName: string;\n}\n\nexport default function ClaudeLogViewer({ logFilePath, requirementName }: ClaudeLogViewerProps) {\n  const [logContent, setLogContent] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(true);\n\n  const {\n    error,\n    isError,\n    clearError,\n    executeFetchWithRetry,\n    retryCount,\n  } = useRetryErrorHandler('ClaudeLogViewer', 3);\n\n  const loadLog = async () => {\n    setIsLoading(true);\n    clearError();\n\n    const data = await executeFetchWithRetry('/api/claude-code/logs', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ logFilePath }),\n    });\n\n    if (data) {\n      setLogContent(data.content || 'No log content available');\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    loadLog();\n  }, [logFilePath]);\n\n  const handleDownload = () => {\n    const blob = new Blob([logContent], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${requirementName}_log.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-4 pb-3 border-b border-gray-700\">\n        <div className=\"flex items-center gap-2\">\n          <FileText className=\"w-5 h-5 text-purple-400\" />\n          <h3 className=\"text-lg font-semibold text-gray-200\">Execution Log</h3>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={loadLog}\n            className=\"p-2 rounded bg-gray-700 hover:bg-gray-600 text-gray-300 transition-colors\"\n            title=\"Refresh log\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n          </motion.button>\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={handleDownload}\n            disabled={!logContent}\n            className=\"p-2 rounded bg-purple-600 hover:bg-purple-500 text-white transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            title=\"Download log\"\n          >\n            <Download className=\"w-4 h-4\" />\n          </motion.button>\n        </div>\n      </div>\n\n      {/* Log Content */}\n      <div className=\"flex-1 overflow-auto\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-gray-400\">\n              Loading log...\n              {retryCount > 0 && <span className=\"ml-2 text-sm\">(Retry {retryCount}/3)</span>}\n            </div>\n          </div>\n        ) : isError && error ? (\n          <InlineErrorDisplay\n            error={error}\n            onRetry={loadLog}\n            onDismiss={clearError}\n          />\n        ) : (\n          <pre className=\"text-sm text-gray-300 bg-gray-900 p-4 rounded font-mono whitespace-pre-wrap break-words\">\n            {logContent}\n          </pre>\n        )}\n      </div>\n\n      {/* Footer Info */}\n      <div className=\"mt-4 pt-3 border-t border-gray-700 text-sm text-gray-500\">\n        <div>Log file: {logFilePath}</div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "typescript"
    },
    {
      "path": "src\\app\\Claude\\ClaudeRequirementDetailModal.tsx",
      "content": "'use client';\nimport React, { useState, useEffect } from 'react';\nimport { FileText, Loader2 } from 'lucide-react';\nimport MarkdownViewer from '@/components/markdown/MarkdownViewer';\nimport { readRequirement } from './lib/requirementApi';\n\ninterface ClaudeRequirementDetailModalProps {\n  projectPath: string;\n  requirementName: string;\n}\n\nexport default function ClaudeRequirementDetailModal({\n  projectPath,\n  requirementName,\n}: ClaudeRequirementDetailModalProps) {\n  const [content, setContent] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadRequirementContent();\n  }, [requirementName]);\n\n  const loadRequirementContent = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const requirementContent = await readRequirement(projectPath, requirementName);\n      setContent(requirementContent);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load requirement');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center space-y-3\">\n          <Loader2 className=\"w-8 h-8 text-purple-400 animate-spin mx-auto\" />\n          <p className=\"text-sm text-gray-400\">Loading requirement...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6 bg-red-500/10 border border-red-500/30 rounded-lg\">\n        <p className=\"text-red-400 text-sm\">{error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header */}\n      <div className=\"flex items-center gap-3 pb-4 border-b border-white/10\">\n        <div className=\"p-2 bg-purple-500/20 rounded-lg\">\n          <FileText className=\"w-5 h-5 text-purple-400\" />\n        </div>\n        <div>\n          <h3 className=\"text-lg font-semibold text-white\">/{requirementName}</h3>\n          <p className=\"text-sm text-gray-400\">Claude Code Requirement</p>\n        </div>\n      </div>\n\n      {/* Markdown Content */}\n      <div className=\"bg-white/5 backdrop-blur-xl rounded-lg border border-white/10 p-6 max-h-[60vh] overflow-y-auto\">\n        <MarkdownViewer content={content} />\n      </div>\n    </div>\n  );\n}\n",
      "type": "typescript"
    },
    {
      "path": "src\\app\\coder\\CoderLayout.tsx",
      "content": "'use client';\nimport React from 'react';\nimport GoalsLayout from './Goals/GoalsLayout';\nimport HorizontalContextBar from './Context/HorizontalContextBar';\nimport { useStore } from '../../stores/nodeStore';\nimport { useActiveProjectStore } from '../../stores/activeProjectStore';\n\nconst CoderLayout = () => {\n  const { getSelectedFilePaths } = useStore();\n  const { fileStructure, activeProject } = useActiveProjectStore();\n\n  // Get selected file paths and count using the proper method\n  const selectedFilePaths = getSelectedFilePaths(fileStructure, activeProject?.id || null);\n  const selectedFilesCount = selectedFilePaths.length;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 p-6\">\n      <div className=\"max-w-[95vw] mx-auto h-full\">\n        {/* Goals Layout - Thin bar at the top */}\n        <GoalsLayout />\n\n        {/* Horizontal Context Bar - Flexible Height */}\n        <div className=\"mb-8\">\n          <HorizontalContextBar\n            selectedFilesCount={selectedFilesCount}\n            selectedFilePaths={selectedFilePaths}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(CoderLayout);",
      "type": "typescript"
    },
    {
      "path": "src\\app\\db\\connection.ts",
      "content": "import Database from 'better-sqlite3';\nimport path from 'path';\nimport fs from 'fs';\n\n// Database path - store in the database directory\nconst DB_PATH = path.join(process.cwd(), 'database', 'goals.db');\n\n// Ensure database directory exists\nconst dbDir = path.dirname(DB_PATH);\nif (!fs.existsSync(dbDir)) {\n  fs.mkdirSync(dbDir, { recursive: true });\n}\n\n// Singleton database instance\nlet db: Database.Database | null = null;\n\n/**\n * Get or create database connection\n * Uses WAL mode for better concurrent access\n */\nexport function getDatabase(): Database.Database {\n  if (!db) {\n    db = new Database(DB_PATH);\n\n    // Enable WAL mode for better concurrent access\n    db.pragma('journal_mode = WAL');\n  }\n\n  return db;\n}\n\n/**\n * Close database connection\n * Should be called on app shutdown\n */\nexport function closeDatabase(): void {\n  if (db) {\n    db.close();\n    db = null;\n  }\n}\n\n// Cleanup handlers for graceful shutdown\nif (typeof process !== 'undefined') {\n  process.on('exit', closeDatabase);\n  process.on('SIGINT', () => {\n    closeDatabase();\n    process.exit(0);\n  });\n  process.on('SIGTERM', () => {\n    closeDatabase();\n    process.exit(0);\n  });\n}\n",
      "type": "typescript"
    },
    {
      "path": "src\\app\\db\\index.ts",
      "content": "/**\n * Database Module - Main Entry Point\n * Provides centralized database access with modular architecture\n */\n\nimport { getDatabase, closeDatabase } from './connection';\nimport { initializeTables } from './schema';\nimport { goalRepository } from './repositories/goal.repository';\nimport { backlogRepository } from './repositories/backlog.repository';\nimport { contextGroupRepository } from './repositories/context-group.repository';\nimport { contextRepository } from './repositories/context.repository';\nimport { eventRepository } from './repositories/event.repository';\nimport { scanRepository } from './repositories/scan.repository';\nimport { ideaRepository } from './repositories/idea.repository';\nimport { implementationLogRepository } from './repositories/implementation-log.repository';\nimport { featureRequestRepository } from './repositories/feature-request.repository';\nimport { conversationRepository } from './repositories/conversation.repository';\nimport { techDebtRepository } from './repositories/tech-debt.repository';\n\n// Export types\nexport * from './models/types';\nexport * from './models/feature-request.types';\nexport * from './models/conversation.types';\nexport * from './models/tech-debt.types';\n\n// Export connection utilities\nexport { getDatabase, closeDatabase };\n\n// Initialize database on first import\nlet initialized = false;\n\nfunction ensureInitialized() {\n  if (!initialized) {\n    initializeTables();\n    initialized = true;\n  }\n}\n\n// Auto-initialize\nensureInitialized();\n\n/**\n * Goal Database Operations\n * Handles development goals and objectives\n */\nexport const goalDb = {\n  ...goalRepository,\n  close: closeDatabase\n};\n\n/**\n * Backlog Database Operations\n * Handles backlog items and proposals\n */\nexport const backlogDb = {\n  ...backlogRepository,\n  close: closeDatabase\n};\n\n/**\n * Context Group Database Operations\n * Handles organization of contexts into groups\n */\nexport const contextGroupDb = {\n  ...contextGroupRepository,\n  close: closeDatabase\n};\n\n/**\n * Context Database Operations\n * Handles file contexts and documentation\n */\nexport const contextDb = {\n  ...contextRepository,\n  close: closeDatabase\n};\n\n/**\n * Event Database Operations\n * Handles system events and logging\n */\nexport const eventDb = {\n  ...eventRepository,\n  close: closeDatabase\n};\n\n/**\n * Scan Database Operations\n * Handles scans with LLM token tracking\n */\nexport const scanDb = {\n  ...scanRepository,\n  close: closeDatabase\n};\n\n/**\n * Idea Database Operations\n * Handles LLM-generated ideas\n */\nexport const ideaDb = {\n  ...ideaRepository,\n  close: closeDatabase\n};\n\n/**\n * Implementation Log Database Operations\n * Handles implementation tracking and history\n */\nexport const implementationLogDb = {\n  ...implementationLogRepository,\n  close: closeDatabase\n};\n\n/**\n * Feature Request Database Operations\n * Handles AI Code Concierge feature requests\n */\nexport const featureRequestDb = {\n  ...featureRequestRepository,\n  close: closeDatabase\n};\n\n/**\n * Conversation Database Operations\n * Handles Annette's conversation memory\n */\nexport const conversationDb = {\n  ...conversationRepository,\n  close: closeDatabase\n};\n\n/**\n * Technical Debt Database Operations\n * Handles technical debt tracking and remediation\n */\nexport const techDebtDb = {\n  ...techDebtRepository,\n  close: closeDatabase\n};\n\n// Cleanup handlers\nif (typeof process !== 'undefined') {\n  process.on('exit', () => {\n    closeDatabase();\n  });\n\n  process.on('SIGINT', () => {\n    closeDatabase();\n    process.exit(0);\n  });\n\n  process.on('SIGTERM', () => {\n    closeDatabase();\n    process.exit(0);\n  });\n}\n",
      "type": "typescript"
    },
    {
      "path": "src\\app\\db\\schema.ts",
      "content": "import { getDatabase } from './connection';\nimport { runMigrations } from './migrations/index';\n\n/**\n * Initialize all database tables\n * Creates tables if they don't exist and runs migrations\n */\nexport function initializeTables() {\n  const db = getDatabase();\n\n  // Create goals table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS goals (\n      id TEXT PRIMARY KEY,\n      project_id TEXT NOT NULL,\n      context_id TEXT,\n      order_index INTEGER NOT NULL,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL CHECK (status IN ('open', 'in_progress', 'done', 'rejected', 'undecided')),\n      created_at TEXT NOT NULL DEFAULT (datetime('now')),\n      updated_at TEXT NOT NULL DEFAULT (datetime('now')),\n      FOREIGN KEY (context_id) REFERENCES contexts(id) ON DELETE SET NULL\n    );\n  `);\n\n  // Create context_groups table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS context_groups (\n      id TEXT PRIMARY KEY,\n      project_id TEXT NOT NULL,\n      name TEXT NOT NULL,\n      color TEXT NOT NULL,\n      position INTEGER NOT NULL,\n      created_at TEXT NOT NULL DEFAULT (datetime('now')),\n      updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n    );\n  `);\n\n  // Create contexts table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS contexts (\n      id TEXT PRIMARY KEY,\n      project_id TEXT NOT NULL,\n      group_id TEXT, -- Optional group assignment\n      name TEXT NOT NULL,\n      description TEXT,\n      file_paths TEXT NOT NULL, -- JSON string of file paths array\n      has_context_file INTEGER DEFAULT 0, -- Boolean flag for context file existence\n      context_file_path TEXT, -- Path to the context file\n      preview TEXT, -- Optional preview image path (relative to public folder)\n      created_at TEXT NOT NULL DEFAULT (datetime('now')),\n      updated_at TEXT NOT NULL DEFAULT (datetime('now')),\n      FOREIGN KEY (group_id) REFERENCES context_groups(id) ON DELETE SET NULL\n    );\n  `);\n\n  // Create events table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS events (\n      id TEXT PRIMARY KEY,\n      project_id TEXT NOT NULL,\n      title TEXT NOT NULL,\n      description TEXT NOT NULL,\n      type TEXT NOT NULL CHECK (type IN ('info', 'warning', 'error', 'success', 'proposal_accepted', 'proposal_rejected')),\n      agent TEXT,\n      message TEXT,\n      created_at TEXT NOT NULL DEFAULT (datetime('now'))\n    );\n  `);\n\n  // Create scans table with token tracking\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS scans (\n      id TEXT PRIMARY KEY,\n      project_id TEXT NOT NULL,\n      scan_type TEXT NOT NULL,\n      timestamp TEXT NOT NULL DEFAULT (datetime('now')),\n      summary TEXT,\n      input_tokens INTEGER, -- LLM input tokens used\n      output_tokens INTEGER, -- LLM output tokens used\n      created_at TEXT NOT NULL DEFAULT (datetime('now'))\n    );\n  `);\n\n  // Create ideas table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS ideas (\n      id TEXT PRIMARY KEY,\n      scan_id TEXT NOT NULL,\n      project_id TEXT NOT NULL,\n      context_id TEXT,\n      scan_type TEXT DEFAULT 'overall',\n      category TEXT NOT NULL,\n      title TEXT NOT NULL,\n      description TEXT,\n      reasoning TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'rejected', 'implemented')),\n      user_feedback TEXT,\n      user_pattern INTEGER DEFAULT 0,\n      effort INTEGER CHECK (effort IS NULL OR (effort >= 1 AND effort <= 3)),\n      impact INTEGER CHECK (impact IS NULL OR (impact >= 1 AND impact <= 3)),\n      created_at TEXT NOT NULL DEFAULT (datetime('now')),\n      updated_at TEXT NOT NULL DEFAULT (datetime('now')),\n      FOREIGN KEY (scan_id) REFERENCES scans(id) ON DELETE CASCADE,\n      FOREIGN KEY (context_id) REFERENCES contexts(id) ON DELETE SET NULL\n    );\n  `);\n\n  // Create backlog_items table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS backlog_items (\n      id TEXT PRIMARY KEY,\n      project_id TEXT NOT NULL,\n      goal_id TEXT,\n      agent TEXT NOT NULL CHECK (agent IN ('developer', 'mastermind', 'tester', 'artist', 'custom')),\n      title TEXT NOT NULL,\n      description TEXT NOT NULL,\n      status TEXT NOT NULL CHECK (status IN ('pending', 'accepted', 'rejected', 'in_progress')),\n      type TEXT NOT NULL CHECK (type IN ('proposal', 'custom')),\n      impacted_files TEXT, -- JSON string of ImpactedFile[]\n      created_at TEXT NOT NULL DEFAULT (datetime('now')),\n      updated_at TEXT NOT NULL DEFAULT (datetime('now')),\n      accepted_at TEXT,\n      rejected_at TEXT,\n      FOREIGN KEY (goal_id) REFERENCES goals(id) ON DELETE SET NULL\n    );\n  `);\n\n  // Create implementation_log table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS implementation_log (\n      id TEXT PRIMARY KEY,\n      project_id TEXT NOT NULL,\n      requirement_name TEXT NOT NULL,\n      title TEXT NOT NULL,\n      overview TEXT NOT NULL,\n      tested INTEGER DEFAULT 0,\n      created_at TEXT NOT NULL DEFAULT (datetime('now'))\n    );\n  `);\n\n  // Create feature_requests table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS feature_requests (\n      id TEXT PRIMARY KEY,\n      project_id TEXT NOT NULL,\n      requester_name TEXT NOT NULL,\n      requester_email TEXT,\n      source TEXT NOT NULL CHECK (source IN ('ui', 'notion', 'jira', 'confluence', 'slack', 'api')),\n      source_metadata TEXT,\n      natural_language_description TEXT NOT NULL,\n      status TEXT NOT NULL CHECK (status IN ('pending', 'analyzing', 'code_generated', 'committed', 'approved', 'rejected', 'failed')),\n      priority TEXT NOT NULL CHECK (priority IN ('low', 'medium', 'high', 'urgent')),\n      ai_analysis TEXT,\n      generated_code TEXT,\n      generated_tests TEXT,\n      generated_documentation TEXT,\n      commit_sha TEXT,\n      commit_url TEXT,\n      error_message TEXT,\n      developer_notes TEXT,\n      created_at TEXT NOT NULL DEFAULT (datetime('now')),\n      updated_at TEXT NOT NULL DEFAULT (datetime('now')),\n      completed_at TEXT\n    );\n  `);\n\n  // Create feature_request_comments table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS feature_request_comments (\n      id TEXT PRIMARY KEY,\n      feature_request_id TEXT NOT NULL,\n      author_name TEXT NOT NULL,\n      author_email TEXT,\n      comment_text TEXT NOT NULL,\n      created_at TEXT NOT NULL DEFAULT (datetime('now')),\n      FOREIGN KEY (feature_request_id) REFERENCES feature_requests(id) ON DELETE CASCADE\n    );\n  `);\n\n  // Create feature_request_notifications table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS feature_request_notifications (\n      id TEXT PRIMARY KEY,\n      feature_request_id TEXT NOT NULL,\n      recipient_email TEXT NOT NULL,\n      notification_type TEXT NOT NULL CHECK (notification_type IN ('new_request', 'code_generated', 'committed', 'approved', 'rejected', 'failed')),\n      sent_at TEXT NOT NULL DEFAULT (datetime('now')),\n      delivery_status TEXT NOT NULL CHECK (delivery_status IN ('pending', 'sent', 'failed')),\n      error_message TEXT,\n      FOREIGN KEY (feature_request_id) REFERENCES feature_requests(id) ON DELETE CASCADE\n    );\n  `);\n\n  // Create conversations table for Annette's memory\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS conversations (\n      id TEXT PRIMARY KEY,\n      project_id TEXT NOT NULL,\n      title TEXT,\n      created_at TEXT NOT NULL DEFAULT (datetime('now')),\n      updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n    );\n  `);\n\n  // Create messages table for conversation history\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS messages (\n      id TEXT PRIMARY KEY,\n      conversation_id TEXT NOT NULL,\n      role TEXT NOT NULL CHECK (role IN ('user', 'assistant', 'system')),\n      content TEXT NOT NULL,\n      memory_type TEXT, -- Free string for future categorization (e.g., 'user_preference', 'project_fact', 'action')\n      metadata TEXT, -- JSON string for additional data\n      created_at TEXT NOT NULL DEFAULT (datetime('now')),\n      FOREIGN KEY (conversation_id) REFERENCES conversations(id) ON DELETE CASCADE\n    );\n  `);\n\n  // Create tech_debt table for Technical Debt Radar\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS tech_debt (\n      id TEXT PRIMARY KEY,\n      project_id TEXT NOT NULL,\n      scan_id TEXT,\n      category TEXT NOT NULL CHECK (category IN (\n        'code_quality', 'security', 'performance', 'maintainability',\n        'testing', 'documentation', 'dependencies', 'architecture',\n        'accessibility', 'other'\n      )),\n      title TEXT NOT NULL,\n      description TEXT NOT NULL,\n      severity TEXT NOT NULL CHECK (severity IN ('critical', 'high', 'medium', 'low')),\n      risk_score INTEGER NOT NULL CHECK (risk_score >= 0 AND risk_score <= 100),\n\n      -- Impact metrics\n      estimated_effort_hours REAL,\n      impact_scope TEXT, -- JSON array\n      technical_impact TEXT,\n      business_impact TEXT,\n\n      -- Detection information\n      detected_by TEXT NOT NULL CHECK (detected_by IN ('automated_scan', 'manual_entry', 'ai_analysis')),\n      detection_details TEXT, -- JSON metadata\n      file_paths TEXT, -- JSON array\n\n      -- Remediation planning\n      status TEXT NOT NULL CHECK (status IN ('detected', 'acknowledged', 'planned', 'in_progress', 'resolved', 'dismissed')),\n      remediation_plan TEXT, -- JSON structured plan\n      remediation_steps TEXT, -- JSON array\n      estimated_completion_date TEXT,\n\n      -- Integration\n      backlog_item_id TEXT,\n      goal_id TEXT,\n\n      -- Timestamps\n      created_at TEXT NOT NULL DEFAULT (datetime('now')),\n      updated_at TEXT NOT NULL DEFAULT (datetime('now')),\n      resolved_at TEXT,\n      dismissed_at TEXT,\n      dismissal_reason TEXT,\n\n      FOREIGN KEY (scan_id) REFERENCES scans(id) ON DELETE SET NULL,\n      FOREIGN KEY (backlog_item_id) REFERENCES backlog_items(id) ON DELETE SET NULL,\n      FOREIGN KEY (goal_id) REFERENCES goals(id) ON DELETE SET NULL\n    );\n  `);\n\n  // Run migrations for existing databases\n  runMigrations();\n\n  // Create indexes for better query performance\n  db.exec(`\n    CREATE INDEX IF NOT EXISTS idx_goals_project_id ON goals(project_id);\n    CREATE INDEX IF NOT EXISTS idx_goals_order_index ON goals(project_id, order_index);\n    CREATE INDEX IF NOT EXISTS idx_backlog_items_project_id ON backlog_items(project_id);\n    CREATE INDEX IF NOT EXISTS idx_backlog_items_goal_id ON backlog_items(goal_id);\n    CREATE INDEX IF NOT EXISTS idx_backlog_items_status ON backlog_items(project_id, status);\n    CREATE INDEX IF NOT EXISTS idx_context_groups_project_id ON context_groups(project_id);\n    CREATE INDEX IF NOT EXISTS idx_context_groups_position ON context_groups(project_id, position);\n    CREATE INDEX IF NOT EXISTS idx_contexts_project_id ON contexts(project_id);\n    CREATE INDEX IF NOT EXISTS idx_contexts_group_id ON contexts(group_id);\n    CREATE INDEX IF NOT EXISTS idx_events_project_id ON events(project_id);\n    CREATE INDEX IF NOT EXISTS idx_events_created_at ON events(project_id, created_at);\n    CREATE INDEX IF NOT EXISTS idx_events_type ON events(project_id, type);\n    CREATE INDEX IF NOT EXISTS idx_scans_project_id ON scans(project_id);\n    CREATE INDEX IF NOT EXISTS idx_scans_timestamp ON scans(project_id, timestamp);\n    CREATE INDEX IF NOT EXISTS idx_ideas_scan_id ON ideas(scan_id);\n    CREATE INDEX IF NOT EXISTS idx_ideas_project_id ON ideas(project_id);\n    CREATE INDEX IF NOT EXISTS idx_ideas_context_id ON ideas(context_id);\n    CREATE INDEX IF NOT EXISTS idx_ideas_status ON ideas(project_id, status);\n    CREATE INDEX IF NOT EXISTS idx_ideas_category ON ideas(category);\n    CREATE INDEX IF NOT EXISTS idx_implementation_log_project_id ON implementation_log(project_id);\n    CREATE INDEX IF NOT EXISTS idx_implementation_log_created_at ON implementation_log(project_id, created_at);\n    CREATE INDEX IF NOT EXISTS idx_feature_requests_project_id ON feature_requests(project_id);\n    CREATE INDEX IF NOT EXISTS idx_feature_requests_status ON feature_requests(project_id, status);\n    CREATE INDEX IF NOT EXISTS idx_feature_requests_created_at ON feature_requests(project_id, created_at);\n    CREATE INDEX IF NOT EXISTS idx_feature_request_comments_request_id ON feature_request_comments(feature_request_id);\n    CREATE INDEX IF NOT EXISTS idx_feature_request_notifications_request_id ON feature_request_notifications(feature_request_id);\n    CREATE INDEX IF NOT EXISTS idx_feature_request_notifications_status ON feature_request_notifications(delivery_status);\n    CREATE INDEX IF NOT EXISTS idx_tech_debt_project_id ON tech_debt(project_id);\n    CREATE INDEX IF NOT EXISTS idx_tech_debt_status ON tech_debt(project_id, status);\n    CREATE INDEX IF NOT EXISTS idx_tech_debt_severity ON tech_debt(project_id, severity);\n    CREATE INDEX IF NOT EXISTS idx_tech_debt_category ON tech_debt(category);\n    CREATE INDEX IF NOT EXISTS idx_tech_debt_risk_score ON tech_debt(project_id, risk_score);\n    CREATE INDEX IF NOT EXISTS idx_tech_debt_backlog_item ON tech_debt(backlog_item_id);\n  `);\n}\n",
      "type": "typescript"
    },
    {
      "path": "src\\app\\ideas\\page.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { AnimatePresence } from 'framer-motion';\nimport { DbIdea } from '@/app/db';\nimport { Context } from '@/lib/queries/contextQueries';\nimport { useProjectConfigStore } from '@/stores/projectConfigStore';\nimport { useActiveProjectStore } from '@/stores/activeProjectStore';\n\n// Components\nimport IdeasHeaderWithFilter from '@/app/features/Ideas/components/IdeasHeaderWithFilter';\nimport BufferView from '@/app/features/Ideas/sub_Buffer/BufferView';\nimport IdeaDetailModal from '@/app/features/Ideas/components/IdeaDetailModal';\nimport { ScanType } from '@/app/features/Ideas/sub_IdeasSetup/ScanTypeSelector';\nimport ScanInitiator from '@/app/features/Ideas/sub_IdeasSetup/ScanInitiator';\nimport LazyContentSection from '@/components/Navigation/LazyContentSection';\n\n// Handlers and utilities\nimport { fetchIdeas, deleteIdea } from '@/app/features/Ideas/lib/ideasHandlers';\nimport {\n  getProjectName,\n  groupIdeasByProjectAndContext,\n  calculateIdeaStats\n} from '@/app/features/Ideas/lib/ideasUtils';\nimport {\n  fetchContextsForProjects,\n  getContextNameFromMap\n} from '@/app/features/Ideas/lib/contextLoader';\nimport { ProcessingIdeaProvider } from '@/app/features/Ideas/lib/ProcessingIdeaContext';\n\nexport default function IdeasPage() {\n  const [ideas, setIdeas] = React.useState<DbIdea[]>([]);\n  const [loading, setLoading] = React.useState(true);\n  const [selectedIdea, setSelectedIdea] = React.useState<DbIdea | null>(null);\n  const [filterProject, setFilterProject] = React.useState<string>('all');\n  const [filterContext, setFilterContext] = React.useState<string | null>(null);\n  const [selectedScanTypes, setSelectedScanTypes] = React.useState<ScanType[]>([]);\n  const [contextsMap, setContextsMap] = React.useState<Record<string, Context[]>>({});\n\n  const { projects, initializeProjects, getProject } = useProjectConfigStore();\n  const { setActiveProject } = useActiveProjectStore();\n\n  // Initialize projects on mount\n  React.useEffect(() => {\n    initializeProjects();\n  }, [initializeProjects]);\n\n  // Fetch ideas on mount\n  React.useEffect(() => {\n    loadIdeas();\n  }, []);\n\n  // Load contexts for all projects when project IDs change (not on every idea update)\n  React.useEffect(() => {\n    const loadContextsForIdeas = async () => {\n      // Get unique project IDs from ideas\n      const projectIds = [...new Set(ideas.map(idea => idea.project_id))];\n\n      if (projectIds.length > 0) {\n        const contexts = await fetchContextsForProjects(projectIds);\n        setContextsMap(contexts);\n      }\n    };\n\n    if (ideas.length > 0) {\n      loadContextsForIdeas();\n    }\n  }, [ideas.map(idea => idea.project_id).sort().join(',')]);\n\n  const loadIdeas = async () => {\n    setLoading(true);\n    const fetchedIdeas = await fetchIdeas();\n    setIdeas(fetchedIdeas);\n    setLoading(false);\n  };\n\n  const handleIdeaUpdate = async (updatedIdea: DbIdea) => {\n    setIdeas(ideas.map(idea => idea.id === updatedIdea.id ? updatedIdea : idea));\n    setSelectedIdea(updatedIdea);\n  };\n\n  const handleIdeaDelete = async (deletedIdeaId: string) => {\n    setIdeas(ideas.filter(idea => idea.id !== deletedIdeaId));\n    setSelectedIdea(null);\n  };\n\n  const handleQuickDelete = async (ideaId: string) => {\n    const success = await deleteIdea(ideaId);\n    if (success) {\n      setIdeas(ideas.filter(idea => idea.id !== ideaId));\n    }\n  };\n\n  const handleContextDelete = async (contextId: string) => {\n    // Capture ideas to delete BEFORE optimistic update\n    const contextIdeas = ideas.filter(idea => idea.context_id === contextId);\n    const projectId = contextIdeas[0]?.project_id;\n    const project = projectId ? getProject(projectId) : null;\n    \n    // Optimistically update UI immediately\n    setIdeas(prevIdeas => prevIdeas.filter(idea => idea.context_id !== contextId));\n    \n    try {\n      const response = await fetch(\n        `/api/contexts/ideas?contextId=${encodeURIComponent(contextId)}${project?.path ? `&projectPath=${encodeURIComponent(project.path)}` : ''}`,\n        { method: 'DELETE' }\n      );\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log(`Deleted ${data.deletedCount} idea(s) from context`);\n      } else {\n        const errorData = await response.json();\n        console.error('Failed to delete context ideas:', errorData.error);\n        // Revert optimistic update on error\n        setIdeas(prevIdeas => [...prevIdeas, ...contextIdeas]);\n        alert(`Failed to delete ideas: ${errorData.error}`);\n      }\n    } catch (error) {\n      console.error('Error deleting context ideas:', error);\n      // Revert optimistic update on error\n      setIdeas(prevIdeas => [...prevIdeas, ...contextIdeas]);\n      alert('Failed to delete ideas. Please refresh the page.');\n    }\n  };\n\n  const handleIdeaClose = () => {\n    setSelectedIdea(null);\n  };\n\n  const handleScanComplete = () => {\n    loadIdeas();\n  };\n\n  const handleProjectSelect = (projectId: string) => {\n    // Update local filter state\n    setFilterProject(projectId);\n    setFilterContext(null); // Reset context filter when project changes\n\n    // Update active project in store (skip if 'all' is selected)\n    if (projectId !== 'all') {\n      const project = getProject(projectId);\n      if (project) {\n        setActiveProject(project);\n      }\n    }\n  };\n\n  // Get selected project details\n  const selectedProject = filterProject !== 'all' ? getProject(filterProject) : null;\n\n  // Filter ideas to only show Pending and Accepted\n  const filteredIdeas = React.useMemo(() =>\n    ideas.filter(idea => idea.status === 'pending' || idea.status === 'accepted'),\n    [ideas]\n  );\n\n  // Compute grouped ideas and stats\n  const groupedIdeas = React.useMemo(() =>\n    groupIdeasByProjectAndContext(filteredIdeas, 'all', filterProject),\n    [filteredIdeas, filterProject]\n  );\n\n  const stats = React.useMemo(() => calculateIdeaStats(ideas), [ideas]);\n\n  // Helper function to get context name using the loaded contexts map\n  const getContextName = React.useCallback((contextId: string) => {\n    return getContextNameFromMap(contextId, contextsMap);\n  }, [contextsMap]);\n\n  return (\n    <ProcessingIdeaProvider>\n      <div className=\"min-h-full bg-gradient-to-br from-gray-900 via-gray-900 to-gray-800\">\n        {/* Header with Project Filter */}\n        <LazyContentSection delay={0}>\n          <IdeasHeaderWithFilter\n            projects={projects}\n            selectedProjectId={filterProject}\n            onSelectProject={handleProjectSelect}\n            selectedContextId={filterContext}\n            onSelectContext={setFilterContext}\n            stats={stats}\n            selectedProjectPath={selectedProject?.path}\n            onIdeaImplemented={loadIdeas}\n          />\n        </LazyContentSection>\n\n        {/* Scan Initiator - Now includes scan type selector inline */}\n        <LazyContentSection delay={0.1}>\n          <div className=\"w-full px-6 py-4\">\n            <ScanInitiator\n              onScanComplete={handleScanComplete}\n              selectedScanTypes={selectedScanTypes}\n              onScanTypesChange={setSelectedScanTypes}\n              selectedContextId={filterContext}\n            />\n          </div>\n        </LazyContentSection>\n\n        {/* Content */}\n        <LazyContentSection delay={0.2}>\n          <div className=\"w-full px-6 py-8\">\n            {/* Ideas Display */}\n            <BufferView\n              loading={loading}\n              ideas={filteredIdeas}\n              groupedIdeas={groupedIdeas}\n              getProjectName={(id) => getProjectName(id, projects)}\n              getContextName={getContextName}\n              onIdeaClick={setSelectedIdea}\n              onIdeaDelete={handleQuickDelete}\n              onContextDelete={handleContextDelete}\n            />\n          </div>\n        </LazyContentSection>\n\n        {/* Detail Modal */}\n        <AnimatePresence>\n          {selectedIdea && (\n            <IdeaDetailModal\n              idea={selectedIdea}\n              onClose={handleIdeaClose}\n              onUpdate={handleIdeaUpdate}\n              onDelete={handleIdeaDelete}\n            />\n          )}\n        </AnimatePresence>\n      </div>\n    </ProcessingIdeaProvider>\n  );\n}\n",
      "type": "typescript"
    },
    {
      "path": "src\\app\\layout.tsx",
      "content": "import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\nimport BackgroundPattern from \"../components/BackgroundPattern\";\nimport QueryProvider from \"../components/QueryProvider\";\nimport { ModalProvider } from \"../contexts/ModalContext\";\nimport { ErrorProvider } from \"../contexts/ErrorContext\";\nimport ContextOverview from \"./coder/Context/ContextOverview/ContextOverview\";\nimport TopBar from \"../components/Navigation/TopBar\";\nimport PageTransition from \"../components/Navigation/PageTransition\";\nimport ControlPanelProvider from \"./features/Onboarding/ControlPanelProvider\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"VibeMan - Development Platform\",\n  description: \"Advanced development tools with seamless navigation and modern UX\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        <BackgroundPattern />\n        <QueryProvider>\n          <ErrorProvider>\n            <ModalProvider>\n              <ControlPanelProvider>\n                <TopBar />\n                <PageTransition>\n                  {children}\n                </PageTransition>\n                <ContextOverview />\n              </ControlPanelProvider>\n            </ModalProvider>\n          </ErrorProvider>\n        </QueryProvider>\n      </body>\n    </html>\n  );\n}\n",
      "type": "typescript"
    },
    {
      "path": "src\\app\\monitor\\page.tsx",
      "content": "'use client';\n\nimport { motion } from 'framer-motion';\nimport MonitorTabs from './components/MonitorTabs';\n\nexport default function MonitorPage() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-slate-900/30 to-blue-900/20 text-white p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-8\"\n        >\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-cyan-400 to-slate-400 bg-clip-text text-transparent mb-2 font-mono\">\n            VOICEBOT MONITORING\n          </h1>\n          <p className=\"text-cyan-300/60 font-mono\">\n            Track and analyze voicebot call sessions and performance\n          </p>\n        </motion.div>\n\n        {/* Tabbed Content */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.1 }}\n        >\n          <MonitorTabs />\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "typescript"
    },
    {
      "path": "src\\app\\page.tsx",
      "content": "'use client';\n\nimport { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useOnboardingStore } from '@/stores/onboardingStore';\nimport CoderLayout from './coder/CoderLayout';\nimport IdeasLayout from './features/Ideas/IdeasLayout';\nimport TinderLayout from './features/Tinder/TinderLayout';\nimport TaskRunnerLayout from './features/TaskRunner/TaskRunnerLayout';\nimport ReflectorLayout from './features/Reflector/ReflectorLayout';\nimport FrozenComponent from '../components/FrozenComponent';\nimport LazyContentSection from '../components/Navigation/LazyContentSection';\n\nexport default function Home() {\n  const [shouldFreezeComponents, setShouldFreezeComponents] = useState(false);\n  const { activeModule } = useOnboardingStore();\n\n  const handleFreezeStateChange = (shouldFreeze: boolean) => {\n    setShouldFreezeComponents(shouldFreeze);\n  };\n\n  // Smooth transition variants\n  const moduleVariants = {\n    initial: { opacity: 0, x: 20 },\n    animate: { opacity: 1, x: 0 },\n    exit: { opacity: 0, x: -20 }\n  };\n\n  const renderActiveModule = () => {\n    switch (activeModule) {\n      case 'coder':\n        return <CoderLayout key=\"coder\" />;\n      case 'ideas':\n        return <IdeasLayout key=\"ideas\" />;\n      case 'tinder':\n        return <TinderLayout key=\"tinder\" />;\n      case 'tasker':\n        return <TaskRunnerLayout key=\"tasker\" />;\n      case 'reflector':\n        return <ReflectorLayout key=\"reflector\" />;\n      default:\n        return <CoderLayout key=\"coder\" />;\n    }\n  };\n\n  return (\n    <main className=\"relative min-h-full\">\n      {/* Module Content with Smooth Transitions */}\n      <LazyContentSection delay={0.1}>\n        <FrozenComponent shouldFreeze={shouldFreezeComponents}>\n          <AnimatePresence mode=\"wait\">\n            <motion.div\n              key={activeModule}\n              variants={moduleVariants}\n              initial=\"initial\"\n              animate=\"animate\"\n              exit=\"exit\"\n              transition={{ duration: 0.3, ease: [0.22, 1, 0.36, 1] }}\n            >\n              {renderActiveModule()}\n            </motion.div>\n          </AnimatePresence>\n        </FrozenComponent>\n      </LazyContentSection>\n    </main>\n  );\n}",
      "type": "typescript"
    },
    {
      "path": "src\\app\\projects\\HighLevelDocsModalWrapper.tsx",
      "content": "import React from 'react';\nimport { useActiveProjectStore } from '@/stores/activeProjectStore';\nimport { DefaultProviderStorage } from '@/lib/llm';\nimport { HighLevelDocsModal } from './ProjectAI/sub_ScanHigh';\n\ninterface HighLevelDocsModalWrapperProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\n/**\n * Simplified wrapper for the redesigned High-Level Documentation modal.\n * This replaces AIProjectReviewModal with a focused, single-purpose component\n * that only handles high-level vision documentation (context/high.md).\n */\nexport default function HighLevelDocsModalWrapper({\n  isOpen,\n  onClose\n}: HighLevelDocsModalWrapperProps) {\n  const { activeProject } = useActiveProjectStore();\n  const provider = DefaultProviderStorage.getDefaultProvider();\n\n  if (!activeProject) {\n    return null;\n  }\n\n  return (\n    <HighLevelDocsModal\n      isOpen={isOpen}\n      onClose={onClose}\n      projectId={activeProject.id}\n      projectName={activeProject.name}\n      projectPath={activeProject.path}\n      provider={provider}\n    />\n  );\n}\n",
      "type": "typescript"
    },
    {
      "path": "src\\app\\projects\\ProjectsLayout.tsx",
      "content": "'use client';\nimport React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  Target,\n  Zap,\n  Trash2,\n} from 'lucide-react';\nimport { useAnalysisStore } from '../../stores/analysisStore';\nimport { useActiveProjectStore } from '../../stores/activeProjectStore';\nimport { useProjectsToolbarStore } from '../../stores/projectsToolbarStore';\nimport { useProjectConfigStore } from '../../stores/projectConfigStore';\nimport { deleteProject } from './ProjectSetting/lib/projectApi';\nimport HighLevelDocsModalWrapper from './HighLevelDocsModalWrapper';\nimport ProjectAdd from './ProjectSetting/ProjectAdd';\nimport ProjectEdit from './ProjectSetting/ProjectEdit';\nimport ProjectManagement from './ProjectSetting/ProjectManagement';\nimport ReviewerPanel from '../reviewer/ReviewerPanel';\nimport CodeReviewModal from '../reviewer/CodeReviewModal';\nimport { ActionGroup, ActionConfig } from '@/components/ui';\nimport GlowWrapper from '@/app/features/Onboarding/components/GlowWrapper';\nimport { useActiveOnboardingStep } from '@/app/features/Onboarding/lib/useOnboardingConditions';\n\n\nexport default function ProjectsLayout() {\n  const { isActive } = useAnalysisStore();\n  const { activeProject, setActiveProject } = useActiveProjectStore();\n  const { syncWithServer } = useProjectConfigStore();\n\n  // Onboarding\n  const { isGenerateDocsActive } = useActiveOnboardingStep();\n\n  const {\n    showAddProject,\n    showEditProject,\n    showAIReview,\n    setShowAddProject,\n    setShowEditProject,\n    setShowAddGoal,\n    setShowAIReview,\n  } = useProjectsToolbarStore();\n\n  // Code Review Modal state - managed at layout level for proper z-index\n  const [showCodeReviewModal, setShowCodeReviewModal] = useState(false);\n\n  // Handle code review completion\n  const handleCodeReviewComplete = () => {\n    setShowCodeReviewModal(false);\n    // The ReviewerPanel will auto-refresh its count via useEffect\n  };\n\n\n  // Goals Management Handlers\n  const handleAddGoal = () => {\n    setShowAddGoal(true);\n  };\n\n  // AI Features Handlers\n  const handleAIProjectReview = () => {\n    setShowAIReview(true);\n  };\n\n  // Handle project added - refresh the project list\n  const handleProjectAdded = async () => {\n    // Only sync for additions, as they need to fetch the full project data\n    await syncWithServer();\n  };\n\n  // Handle project updated - no need to refresh, optimistic updates handle it\n  const handleProjectUpdated = () => {\n    // Stores are already updated optimistically, no need to fetch\n    console.log('[ProjectsLayout] Project updated via optimistic update');\n  };\n\n  // Handle project deletion\n  const handleDeleteProject = async () => {\n    if (!activeProject) return;\n\n    const confirmDelete = window.confirm(\n      `Are you sure you want to delete project \"${activeProject.name}\"? This action cannot be undone.`\n    );\n\n    if (confirmDelete) {\n      const success = await deleteProject(activeProject.id);\n      if (success) {\n        // Refresh the project list and let the store handle clearing active project\n        await syncWithServer();\n        // Check if there are other projects available\n        const { getAllProjects } = useProjectConfigStore.getState();\n        const remainingProjects = getAllProjects();\n        if (remainingProjects.length > 0) {\n          // Set the first available project as active\n          setActiveProject(remainingProjects[0]);\n        }\n      } else {\n        alert('Failed to delete project. Please try again.');\n      }\n    }\n  };\n\n  // Define actions for ActionGroup\n  const projectActions: ActionConfig[] = [\n    {\n      id: 'add-goal',\n      icon: Target,\n      text: 'Goal',\n      onClick: handleAddGoal,\n      tooltip: 'Add new goal',\n      colorScheme: 'blue',\n      iconAnimation: 'rotate',\n    },\n    {\n      id: 'ai-review',\n      icon: Zap,\n      text: 'Plan',\n      onClick: handleAIProjectReview,\n      tooltip: 'AI-powered project review and analysis',\n      disabled: !activeProject,\n      colorScheme: 'amber',\n      iconAnimation: 'scale',\n    },\n    {\n      id: 'delete-project',\n      icon: Trash2,\n      text: '',\n      onClick: handleDeleteProject,\n      tooltip: 'Delete current project',\n      disabled: !activeProject,\n      colorScheme: 'red',\n      iconOnly: true,\n      iconAnimation: 'scale',\n    },\n  ];\n\n  return (\n    <>\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className={`w-full py-4 bg-gradient-to-r from-gray-900/95 via-gray-800/95 to-gray-900/95 backdrop-blur-xl border-b border-gray-700/30 ${isActive ? 'shadow-lg shadow-blue-500/20' : ''\n          }`}\n      >\n        <div className=\"h-full w-full flex items-center justify-between px-6 gap-8\">\n\n          {/* Left Section: Project Management */}\n          <ProjectManagement />\n\n          {/* Middle Section: Reviewer Panel */}\n          <ReviewerPanel onOpenReview={() => setShowCodeReviewModal(true)} />\n\n          {/* Right Section: Goals & AI Actions */}\n          <div className=\"flex items-center space-x-4\">\n            <GlowWrapper isActive={isGenerateDocsActive}>\n              <ActionGroup label=\"Actions\" actions={projectActions} />\n            </GlowWrapper>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* High-Level Documentation Modal */}\n      <HighLevelDocsModalWrapper\n        isOpen={showAIReview}\n        onClose={() => setShowAIReview(false)}\n      />\n\n      {/* Add Project Modal */}\n      <ProjectAdd\n        isOpen={showAddProject}\n        onClose={() => setShowAddProject(false)}\n        onProjectAdded={handleProjectAdded}\n      />\n\n      {/* Edit Project Modal */}\n      <ProjectEdit\n        isOpen={showEditProject}\n        onClose={() => setShowEditProject(false)}\n        onProjectUpdated={handleProjectUpdated}\n        project={activeProject}\n      />\n\n      {/* Code Review Modal - Rendered at layout level for proper z-index */}\n      {showCodeReviewModal && (\n        <CodeReviewModal\n          isOpen={showCodeReviewModal}\n          onClose={() => setShowCodeReviewModal(false)}\n          onComplete={handleCodeReviewComplete}\n          projectId={activeProject?.id || ''}\n        />\n      )}\n    </>\n  );\n}",
      "type": "typescript"
    },
    {
      "path": "src\\app\\reflector\\page.tsx",
      "content": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport { motion } from 'framer-motion';\nimport { Trophy, Calendar, Network, BarChart3 } from 'lucide-react';\nimport { DbIdea } from '@/app/db';\nimport { useProjectConfigStore } from '@/stores/projectConfigStore';\nimport { useContextStore } from '@/stores/contextStore';\nimport TotalViewFilters from '@/app/features/reflector/components/TotalViewFilters';\nimport TotalViewDashboard from '@/app/features/reflector/components/TotalViewDashboard';\nimport ActiveFiltersDisplay from '@/app/features/reflector/components/ActiveFiltersDisplay';\nimport DependenciesTab from '@/app/features/Depndencies/DependenciesTab';\nimport ReflectionDashboard from '@/app/features/reflector/sub_Reflection/components/ReflectionDashboard';\nimport { IdeaFilterState, getEmptyFilterState, applyFilters } from '@/app/features/reflector/lib/filterIdeas';\n\nexport default function ReflectorPage() {\n  const [ideas, setIdeas] = useState<DbIdea[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [viewMode, setViewMode] = useState<'weekly' | 'total' | 'ideas_stats' | 'dependencies'>('weekly');\n  const [filters, setFilters] = useState<IdeaFilterState>(getEmptyFilterState());\n\n  const { projects, initializeProjects } = useProjectConfigStore();\n  const searchParams = useSearchParams();\n  const router = useRouter();\n\n  // Initialize projects and load ideas\n  useEffect(() => {\n    initializeProjects();\n    loadImplementedIdeas();\n  }, []);\n\n  // Sync filters with URL parameters\n  useEffect(() => {\n    const projectIds = searchParams.get('projects')?.split(',').filter(Boolean) || [];\n    const contextIds = searchParams.get('contexts')?.split(',').filter(Boolean) || [];\n    const statuses = searchParams.get('statuses')?.split(',').filter(Boolean) || [];\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const searchQuery = searchParams.get('search') || '';\n\n    setFilters({\n      projectIds,\n      contextIds,\n      statuses,\n      dateRange: {\n        start: startDate ? new Date(startDate) : null,\n        end: endDate ? new Date(endDate) : null,\n      },\n      searchQuery,\n    });\n  }, [searchParams]);\n\n  const loadImplementedIdeas = async () => {\n    try {\n      const response = await fetch('/api/ideas?status=implemented');\n      if (response.ok) {\n        const data = await response.json();\n        setIdeas(data.ideas || []);\n      }\n    } catch (error) {\n      console.error('Error loading implemented ideas:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Apply filters and view mode\n  const displayedIdeas = React.useMemo(() => {\n    let filtered = ideas;\n\n    // Apply view mode filter first (weekly vs total)\n    if (viewMode === 'weekly') {\n      const oneWeekAgo = new Date();\n      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n\n      filtered = filtered.filter(idea => {\n        if (!idea.implemented_at) return false;\n        const implementedDate = new Date(idea.implemented_at);\n        return implementedDate >= oneWeekAgo;\n      });\n    }\n\n    // Apply user filters only in total view\n    if (viewMode === 'total') {\n      filtered = applyFilters(filtered, filters);\n    }\n\n    return filtered;\n  }, [ideas, viewMode, filters]);\n\n  // Calculate stats\n  const stats = React.useMemo(() => {\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const weekAgo = new Date(today);\n    weekAgo.setDate(weekAgo.getDate() - 7);\n    const monthAgo = new Date(today);\n    monthAgo.setMonth(monthAgo.getMonth() - 1);\n\n    return {\n      today: ideas.filter(i => {\n        if (!i.implemented_at) return false;\n        const date = new Date(i.implemented_at);\n        return date >= today;\n      }).length,\n      week: ideas.filter(i => {\n        if (!i.implemented_at) return false;\n        const date = new Date(i.implemented_at);\n        return date >= weekAgo;\n      }).length,\n      month: ideas.filter(i => {\n        if (!i.implemented_at) return false;\n        const date = new Date(i.implemented_at);\n        return date >= monthAgo;\n      }).length,\n    };\n  }, [ideas]);\n\n  // Update URL when filters change\n  const handleFilterChange = (newFilters: IdeaFilterState) => {\n    setFilters(newFilters);\n\n    const params = new URLSearchParams();\n    if (newFilters.projectIds.length > 0) {\n      params.set('projects', newFilters.projectIds.join(','));\n    }\n    if (newFilters.contextIds.length > 0) {\n      params.set('contexts', newFilters.contextIds.join(','));\n    }\n    if (newFilters.statuses.length > 0) {\n      params.set('statuses', newFilters.statuses.join(','));\n    }\n    if (newFilters.dateRange.start) {\n      params.set('startDate', newFilters.dateRange.start.toISOString());\n    }\n    if (newFilters.dateRange.end) {\n      params.set('endDate', newFilters.dateRange.end.toISOString());\n    }\n    if (newFilters.searchQuery.trim()) {\n      params.set('search', newFilters.searchQuery);\n    }\n\n    const newUrl = params.toString() ? `?${params.toString()}` : '/reflector';\n    router.push(newUrl, { scroll: false });\n  };\n\n  // Remove individual filter\n  const handleRemoveFilter = (filterType: keyof IdeaFilterState, value?: string) => {\n    const newFilters = { ...filters };\n\n    if (filterType === 'projectIds' && value) {\n      newFilters.projectIds = newFilters.projectIds.filter(id => id !== value);\n    } else if (filterType === 'contextIds' && value) {\n      newFilters.contextIds = newFilters.contextIds.filter(id => id !== value);\n    } else if (filterType === 'statuses' && value) {\n      newFilters.statuses = newFilters.statuses.filter(s => s !== value);\n    } else if (filterType === 'dateRange') {\n      newFilters.dateRange = { start: null, end: null };\n    } else if (filterType === 'searchQuery') {\n      newFilters.searchQuery = '';\n    }\n\n    handleFilterChange(newFilters);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-yellow-900/10 to-gray-900\">\n      {/* Header */}\n      <motion.div\n        className=\"border-b border-yellow-700/40 bg-gray-900/60 backdrop-blur-xl\"\n        initial={{ y: -20, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ duration: 0.5 }}\n      >\n        <div className=\"max-w-7xl mx-auto px-6 py-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            {/* Left: Title */}\n            <div className=\"flex items-center space-x-4\">\n              <motion.div\n                className=\"p-3 bg-gradient-to-br from-yellow-500/20 to-amber-500/30 rounded-xl border border-yellow-500/40\"\n                animate={{ rotate: [0, 5, -5, 0] }}\n                transition={{ duration: 4, repeat: Infinity }}\n              >\n                <Trophy className=\"w-6 h-6 text-yellow-400\" />\n              </motion.div>\n              <div>\n                <h1 className=\"text-2xl font-bold bg-gradient-to-r from-yellow-400 to-amber-400 bg-clip-text text-transparent\">\n                  Reflector\n                </h1>\n                <p className=\"text-sm text-gray-400 mt-1\">\n                  Implemented ideas and achievements\n                </p>\n              </div>\n            </div>\n\n            {/* Right: Stats */}\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"w-4 h-4 text-yellow-400\" />\n                <div className=\"text-sm\">\n                  <span className=\"text-gray-500\">Today:</span>{' '}\n                  <span className=\"text-yellow-400 font-mono font-semibold\">{stats.today}</span>\n                </div>\n              </div>\n              <div className=\"text-sm\">\n                <span className=\"text-gray-500\">Week:</span>{' '}\n                <span className=\"text-yellow-400 font-mono font-semibold\">{stats.week}</span>\n              </div>\n              <div className=\"text-sm\">\n                <span className=\"text-gray-500\">Month:</span>{' '}\n                <span className=\"text-amber-400 font-mono font-semibold\">{stats.month}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* View Mode Tabs */}\n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={() => setViewMode('weekly')}\n              className={`px-4 py-2 rounded-lg text-sm font-semibold transition-all ${\n                viewMode === 'weekly'\n                  ? 'bg-yellow-500/20 text-yellow-300 border border-yellow-500/40'\n                  : 'bg-gray-800/40 text-gray-400 border border-gray-700/40 hover:bg-gray-800/60'\n              }`}\n            >\n              Weekly\n            </button>\n            <button\n              onClick={() => setViewMode('total')}\n              className={`px-4 py-2 rounded-lg text-sm font-semibold transition-all ${\n                viewMode === 'total'\n                  ? 'bg-yellow-500/20 text-yellow-300 border border-yellow-500/40'\n                  : 'bg-gray-800/40 text-gray-400 border border-gray-700/40 hover:bg-gray-800/60'\n              }`}\n            >\n              Implemented\n            </button>\n            <button\n              onClick={() => setViewMode('ideas_stats')}\n              className={`flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-semibold transition-all ${\n                viewMode === 'ideas_stats'\n                  ? 'bg-yellow-500/20 text-yellow-300 border border-yellow-500/40'\n                  : 'bg-gray-800/40 text-gray-400 border border-gray-700/40 hover:bg-gray-800/60'\n              }`}\n            >\n              <BarChart3 className=\"w-4 h-4\" />\n              Ideas Stats\n            </button>\n            <button\n              onClick={() => setViewMode('dependencies')}\n              className={`flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-semibold transition-all ${\n                viewMode === 'dependencies'\n                  ? 'bg-yellow-500/20 text-yellow-300 border border-yellow-500/40'\n                  : 'bg-gray-800/40 text-gray-400 border border-gray-700/40 hover:bg-gray-800/60'\n              }`}\n            >\n              <Network className=\"w-4 h-4\" />\n              Dependencies\n            </button>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        {loading && viewMode !== 'dependencies' && viewMode !== 'ideas_stats' ? (\n          <div className=\"flex items-center justify-center py-24\">\n            <div className=\"text-gray-400\">Loading...</div>\n          </div>\n        ) : viewMode === 'weekly' ? (\n          <div className=\"text-center py-24 text-gray-400\">\n            Weekly view content will be implemented here\n            <br />\n            {displayedIdeas.length} ideas implemented in the last 7 days\n          </div>\n        ) : viewMode === 'dependencies' ? (\n          <DependenciesTab />\n        ) : viewMode === 'ideas_stats' ? (\n          <ReflectionDashboard />\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Filters and Active Filter Display */}\n            <div className=\"space-y-4\">\n              <TotalViewFilters\n                projects={projects}\n                filters={filters}\n                onChange={handleFilterChange}\n                ideas={ideas}\n              />\n              <ActiveFiltersDisplay\n                filters={filters}\n                projects={projects}\n                onRemoveFilter={handleRemoveFilter}\n              />\n            </div>\n\n            {/* Dashboard */}\n            <TotalViewDashboard\n              ideas={displayedIdeas}\n              isFiltered={\n                filters.projectIds.length > 0 ||\n                filters.contextIds.length > 0 ||\n                filters.statuses.length > 0 ||\n                !!filters.dateRange.start ||\n                !!filters.dateRange.end ||\n                !!filters.searchQuery.trim()\n              }\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",
      "type": "typescript"
    },
    {
      "path": "src\\app\\reviewer\\CodeReviewEditor.tsx",
      "content": "import React from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { MonacoDiffEditor, MonacoEditor } from '@/components/editor';\nimport { ReviewFile, getLanguageFromFilepath } from './lib';\n\ninterface CodeReviewEditorProps {\n  currentFile: ReviewFile | undefined;\n  onContentChange: (content: string) => void;\n}\n\nexport default function CodeReviewEditor({ currentFile, onContentChange }: CodeReviewEditorProps) {\n  if (!currentFile) {\n    return (\n      <div className=\"h-[70vh] flex items-center justify-center\">\n        <div className=\"text-gray-400\">No file selected</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-[70vh] overflow-hidden\">\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key={`${currentFile.id}-${currentFile.isEditing ? 'edit' : 'diff'}`}\n          initial={{ opacity: 0, x: 20 }}\n          animate={{ opacity: 1, x: 0 }}\n          exit={{ opacity: 0, x: -20 }}\n          transition={{ duration: 0.3 }}\n          className=\"h-full\"\n        >\n          {currentFile.isEditing ? (\n            // Edit Mode - Monaco Editor\n            <div className=\"h-full border border-gray-700/30 rounded-lg overflow-hidden\">\n              <MonacoEditor\n                value={currentFile.editedContent || currentFile.generated_content}\n                onChange={onContentChange}\n                language={getLanguageFromFilepath(currentFile.filepath)}\n                theme=\"vs-dark\"\n                height=\"100%\"\n                width=\"100%\"\n                options={{\n                  minimap: { enabled: true },\n                  scrollBeyondLastLine: false,\n                  fontSize: 14,\n                  lineNumbers: 'on',\n                  wordWrap: 'on',\n                  automaticLayout: true\n                }}\n              />\n            </div>\n          ) : (\n            // Diff Mode - Monaco Diff Editor\n            <div className=\"h-full border border-gray-700/30 rounded-lg overflow-hidden\">\n              <MonacoDiffEditor\n                original={currentFile.original_content || ''}\n                modified={currentFile.generated_content}\n                language={getLanguageFromFilepath(currentFile.filepath)}\n                theme=\"vs-dark\"\n                height=\"100%\"\n                width=\"100%\"\n                options={{\n                  minimap: { enabled: true },\n                  scrollBeyondLastLine: false,\n                  fontSize: 14,\n                  renderSideBySide: true,\n                  readOnly: true,\n                  automaticLayout: true\n                }}\n              />\n            </div>\n          )}\n        </motion.div>\n      </AnimatePresence>\n    </div>\n  );\n}",
      "type": "typescript"
    },
    {
      "path": "src\\app\\reviewer\\CodeReviewModal.tsx",
      "content": "import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { Plus, Edit3 } from 'lucide-react';\nimport CodeReviewNav from './CodeReviewNav';\nimport CodeReviewEditor from './CodeReviewEditor';\nimport {\n  ReviewSession,\n  fetchPendingSessions,\n  calculateTotalFiles,\n  calculateGlobalFileIndex,\n  toggleFileEditing,\n  updateFileContent,\n  getFileActionLabel\n} from './lib';\n\ninterface CodeReviewModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n  projectId: string;\n}\n\nexport default function CodeReviewModal({ isOpen, onClose, onComplete, projectId }: CodeReviewModalProps) {\n  const [sessions, setSessions] = useState<ReviewSession[]>([]);\n  const [currentSessionIndex, setCurrentSessionIndex] = useState(0);\n  const [currentFileIndex, setCurrentFileIndex] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch pending files grouped by sessions\n  const fetchPendingFiles = async () => {\n    if (!projectId || !isOpen) return;\n\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await fetchPendingSessions(projectId);\n      setSessions(data.sessions || []);\n      setCurrentSessionIndex(0);\n      setCurrentFileIndex(0);\n    } catch (err) {\n      setError('Error loading files');\n      console.error('Failed to fetch pending files:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPendingFiles();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, projectId]);\n\n  const currentSession = sessions[currentSessionIndex];\n  const currentFile = currentSession?.files[currentFileIndex];\n  const totalFiles = calculateTotalFiles(sessions);\n  const currentFileGlobalIndex = calculateGlobalFileIndex(sessions, currentSessionIndex, currentFileIndex);\n\n  // Handle sessions update from child components\n  const handleSessionsUpdate = (updatedSessions: ReviewSession[]) => {\n    setSessions(updatedSessions);\n  };\n\n  // Handle error from child components\n  const handleError = (errorMessage: string) => {\n    setError(errorMessage);\n  };\n\n\n\n  // Toggle edit mode\n  const handleToggleEdit = () => {\n    if (!currentFile) return;\n\n    const updatedSessions = toggleFileEditing(sessions, currentSessionIndex, currentFileIndex);\n    setSessions(updatedSessions);\n  };\n\n  // Handle content change in editor\n  const handleContentChange = (content: string) => {\n    if (!currentFile) return;\n\n    const updatedSessions = updateFileContent(sessions, currentSessionIndex, currentFileIndex, content);\n    setSessions(updatedSessions);\n  };\n\n  // Navigation\n  const goToPrevious = () => {\n    if (currentFileIndex > 0) {\n      setCurrentFileIndex(currentFileIndex - 1);\n    } else if (currentSessionIndex > 0) {\n      setCurrentSessionIndex(currentSessionIndex - 1);\n      setCurrentFileIndex(sessions[currentSessionIndex - 1].files.length - 1);\n    }\n  };\n\n  const goToNext = () => {\n    if (currentFileIndex < currentSession.files.length - 1) {\n      setCurrentFileIndex(currentFileIndex + 1);\n    } else if (currentSessionIndex < sessions.length - 1) {\n      setCurrentSessionIndex(currentSessionIndex + 1);\n      setCurrentFileIndex(0);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"fixed inset-0 z-[99999] bg-black/50 backdrop-blur-sm flex items-center justify-center\">\n        <div className=\"bg-slate-900 rounded-lg p-8 border border-slate-700\">\n          <div className=\"text-gray-400\">Loading files for review...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (totalFiles === 0) {\n    return (\n      <div className=\"fixed inset-0 z-[99999] bg-black/50 backdrop-blur-sm flex items-center justify-center\">\n        <div className=\"bg-slate-900 rounded-lg p-8 border border-slate-700\">\n          <div className=\"text-gray-400\">No pending files found for review.</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-[99999] bg-black/50 backdrop-blur-sm\">\n      <div className=\"h-full flex flex-col bg-slate-900 border-l border-slate-700\">\n        {/* Header */}\n        <div className=\"flex-shrink-0 p-4 border-b border-slate-700 bg-slate-800/50\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-gradient-to-br from-cyan-800/60 to-blue-900/60 rounded-lg border border-slate-600/30\">\n                {currentFile?.action === 'create' ? (\n                  <Plus className=\"w-5 h-5 text-cyan-300\" />\n                ) : (\n                  <Edit3 className=\"w-5 h-5 text-cyan-300\" />\n                )}\n              </div>\n              <div>\n                <h2 className=\"text-lg font-semibold text-white\">\n                  Code Review - {currentFile?.filepath || 'Loading...'}\n                </h2>\n                <p className=\"text-sm text-slate-400\">\n                  {currentSession?.taskTitle || 'Task'} â¢ File {currentFileGlobalIndex + 1} of {totalFiles} â¢ {getFileActionLabel(currentFile?.action || 'create')}\n                </p>\n              </div>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"p-2 hover:bg-slate-700 rounded-lg transition-colors text-slate-400 hover:text-slate-300\"\n            >\n              â\n            </button>\n          </div>\n        </div>\n\n        {/* Error Display */}\n        {error && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"flex-shrink-0 m-4 p-3 bg-red-500/10 border border-red-500/30 rounded-lg text-red-400 text-sm\"\n          >\n            {error}\n          </motion.div>\n        )}\n\n        {/* Navigation */}\n        <div className=\"flex-shrink-0\">\n          <CodeReviewNav\n            sessions={sessions}\n            currentSessionIndex={currentSessionIndex}\n            currentFileIndex={currentFileIndex}\n            currentFile={currentFile}\n            onPrevious={goToPrevious}\n            onNext={goToNext}\n            onToggleEdit={handleToggleEdit}\n            onSessionsUpdate={handleSessionsUpdate}\n            onComplete={onComplete}\n            onError={handleError}\n            setCurrentSessionIndex={setCurrentSessionIndex}\n            setCurrentFileIndex={setCurrentFileIndex}\n          />\n        </div>\n\n        {/* Editor - Fixed height for proper visibility */}\n        <div className=\"p-4\">\n          <CodeReviewEditor\n            currentFile={currentFile}\n            onContentChange={handleContentChange}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n",
      "type": "typescript"
    },
    {
      "path": "src\\app\\reviewer\\CodeReviewNav.tsx",
      "content": "import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { ChevronLeft, ChevronRight, Edit3, XIcon, X, Check } from 'lucide-react';\nimport {\n  ReviewFile,\n  ReviewSession,\n  acceptFile,\n  rejectFile,\n  declineSession,\n  calculateTotalFiles,\n  calculateGlobalFileIndex,\n  isFirstFile,\n  isLastFile,\n  removeFileFromSessions,\n  getContentToApply,\n  calculateProgress\n} from './lib';\n\ninterface CodeReviewNavProps {\n  sessions: ReviewSession[];\n  currentSessionIndex: number;\n  currentFileIndex: number;\n  currentFile: ReviewFile | undefined;\n  onPrevious: () => void;\n  onNext: () => void;\n  onToggleEdit: () => void;\n  onSessionsUpdate: (sessions: ReviewSession[]) => void;\n  onComplete: () => void;\n  onError: (error: string) => void;\n  setCurrentSessionIndex: (index: number) => void;\n  setCurrentFileIndex: (index: number) => void;\n}\n\nexport default function CodeReviewNav({\n  sessions,\n  currentSessionIndex,\n  currentFileIndex,\n  currentFile,\n  onPrevious,\n  onNext,\n  onToggleEdit,\n  onSessionsUpdate,\n  onComplete,\n  onError,\n  setCurrentSessionIndex,\n  setCurrentFileIndex\n}: CodeReviewNavProps) {\n  const [processing, setProcessing] = useState(false);\n\n  // Handle file acceptance\n  const handleAcceptFile = async () => {\n    if (!currentFile) return;\n\n    setProcessing(true);\n    try {\n      const contentToApply = getContentToApply(currentFile);\n\n      await acceptFile({\n        fileId: currentFile.id,\n        content: contentToApply\n      });\n\n      // Remove accepted file from current session\n      const result = removeFileFromSessions(sessions, currentSessionIndex, currentFileIndex);\n\n      if (result.allSessionsEmpty) {\n        onComplete();\n        return;\n      }\n\n      setCurrentSessionIndex(result.newSessionIndex);\n      setCurrentFileIndex(result.newFileIndex);\n      onSessionsUpdate(result.updatedSessions);\n    } catch (err) {\n      onError('Error accepting file');\n      console.error('Failed to accept file:', err);\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  // Handle file rejection\n  const handleRejectFile = async () => {\n    if (!currentFile) return;\n\n    setProcessing(true);\n    try {\n      await rejectFile({ fileId: currentFile.id });\n\n      // Remove rejected file from current session\n      const result = removeFileFromSessions(sessions, currentSessionIndex, currentFileIndex);\n\n      if (result.allSessionsEmpty) {\n        onComplete();\n        return;\n      }\n\n      setCurrentSessionIndex(result.newSessionIndex);\n      setCurrentFileIndex(result.newFileIndex);\n      onSessionsUpdate(result.updatedSessions);\n    } catch (err) {\n      onError('Error rejecting file');\n      console.error('Failed to reject file:', err);\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  // Handle decline all (reject entire session)\n  const handleDeclineAll = async () => {\n    if (!currentFile) return;\n\n    setProcessing(true);\n    try {\n      await declineSession({ sessionId: currentFile.session_id });\n      onComplete();\n    } catch (err) {\n      onError('Error declining session');\n      console.error('Failed to decline session:', err);\n    } finally {\n      setProcessing(false);\n    }\n  };\n  const currentSession = sessions[currentSessionIndex];\n  const totalSessions = sessions.length;\n  const totalFiles = calculateTotalFiles(sessions);\n  const currentFileGlobalIndex = calculateGlobalFileIndex(sessions, currentSessionIndex, currentFileIndex);\n\n  const isFirst = isFirstFile(currentSessionIndex, currentFileIndex);\n  const isLast = isLastFile(sessions, currentSessionIndex, currentFileIndex);\n\n  return (\n    <div className=\"flex items-center justify-between p-4 border-b border-gray-700/30 bg-slate-800/20\">\n      {/* Navigation */}\n      <div className=\"flex items-center space-x-4\">\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={onPrevious}\n          disabled={isFirst}\n          className=\"p-2 bg-gray-700/30 hover:bg-gray-700/50 border border-gray-600/30 rounded-lg text-gray-400 hover:text-gray-300 transition-all disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          <ChevronLeft className=\"w-4 h-4\" />\n        </motion.button>\n\n        <div className=\"text-sm text-gray-400 text-center\">\n          <div className=\"font-medium\">\n            {currentFileGlobalIndex + 1} / {totalFiles}\n          </div>\n          <div className=\"text-sm text-gray-500\">\n            Session {currentSessionIndex + 1}/{totalSessions} â¢ File {currentFileIndex + 1}/{currentSession?.files.length || 0}\n          </div>\n        </div>\n\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={onNext}\n          disabled={isLast}\n          className=\"p-2 bg-gray-700/30 hover:bg-gray-700/50 border border-gray-600/30 rounded-lg text-gray-400 hover:text-gray-300 transition-all disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          <ChevronRight className=\"w-4 h-4\" />\n        </motion.button>\n      </div>\n\n      {/* Actions */}\n      <div className=\"flex items-center space-x-3\">\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          onClick={onToggleEdit}\n          className=\"px-4 py-2 bg-blue-600/20 hover:bg-blue-600/30 border border-blue-600/30 text-blue-400 rounded-lg transition-colors font-medium flex items-center space-x-2\"\n        >\n          <Edit3 className=\"w-4 h-4\" />\n          <span>{currentFile?.isEditing ? 'View Diff' : 'Edit'}</span>\n        </motion.button>\n\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          onClick={handleDeclineAll}\n          disabled={processing}\n          className=\"px-4 py-2 bg-gray-600/20 hover:bg-gray-600/30 border border-gray-600/30 text-gray-400 rounded-lg transition-colors font-medium flex items-center space-x-2\"\n        >\n          <XIcon className=\"w-4 h-4\" />\n          <span>Decline All</span>\n        </motion.button>\n\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          onClick={handleRejectFile}\n          disabled={processing}\n          className=\"px-4 py-2 bg-red-600/20 hover:bg-red-600/30 border border-red-600/30 text-red-400 rounded-lg transition-colors font-medium flex items-center space-x-2\"\n        >\n          <X className=\"w-4 h-4\" />\n          <span>Reject</span>\n        </motion.button>\n\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          onClick={handleAcceptFile}\n          disabled={processing}\n          className=\"px-4 py-2 bg-green-600/20 hover:bg-green-600/30 border border-green-600/30 text-green-400 rounded-lg transition-colors font-medium flex items-center space-x-2\"\n        >\n          <Check className=\"w-4 h-4\" />\n          <span>Accept</span>\n        </motion.button>\n      </div>\n\n      {/* Progress Indicator */}\n      <div className=\"absolute bottom-0 left-0 right-0 h-1 bg-gray-700/30\">\n        <motion.div\n          className=\"h-full bg-gradient-to-r from-cyan-500 to-blue-500\"\n          initial={{ width: 0 }}\n          animate={{ width: `${calculateProgress(currentFileGlobalIndex, totalFiles)}%` }}\n          transition={{ duration: 0.5 }}\n        />\n      </div>\n    </div>\n  );\n}",
      "type": "typescript"
    },
    {
      "path": "src\\app\\reviewer\\index.ts",
      "content": "// Export all reviewer components\nexport { default as ReviewerPanel } from './ReviewerPanel';\nexport { default as CodeReviewModal } from './CodeReviewModal';",
      "type": "typescript"
    }
  ]
}