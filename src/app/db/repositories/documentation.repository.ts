import { getDatabase } from '../connection';
import type { DbDocumentation, DocSourceMetadata } from '../models/types';

/**
 * Documentation Repository
 * Handles CRUD operations for auto-generated documentation
 */

export const documentationRepository = {
  /**
   * Create a new documentation entry
   */
  create(doc: Omit<DbDocumentation, 'created_at' | 'updated_at'>): DbDocumentation {
    const db = getDatabase();
    const now = new Date().toISOString();

    const stmt = db.prepare(`
      INSERT INTO documentation (
        id, project_id, title, content, section_type,
        auto_generated, source_metadata, last_sync_at,
        created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);

    stmt.run(
      doc.id,
      doc.project_id,
      doc.title,
      doc.content,
      doc.section_type,
      doc.auto_generated,
      doc.source_metadata,
      doc.last_sync_at,
      now,
      now
    );

    return {
      ...doc,
      created_at: now,
      updated_at: now
    };
  },

  /**
   * Get documentation by ID
   */
  getById(id: string): DbDocumentation | null {
    const db = getDatabase();
    const stmt = db.prepare('SELECT * FROM documentation WHERE id = ?');
    return stmt.get(id) as DbDocumentation | null;
  },

  /**
   * Get all documentation for a project
   */
  getByProject(projectId: string): DbDocumentation[] {
    const db = getDatabase();
    const stmt = db.prepare(`
      SELECT * FROM documentation
      WHERE project_id = ?
      ORDER BY section_type, title
    `);
    return stmt.all(projectId) as DbDocumentation[];
  },

  /**
   * Get documentation by section type
   */
  getBySectionType(projectId: string, sectionType: DbDocumentation['section_type']): DbDocumentation[] {
    const db = getDatabase();
    const stmt = db.prepare(`
      SELECT * FROM documentation
      WHERE project_id = ? AND section_type = ?
      ORDER BY title
    `);
    return stmt.all(projectId, sectionType) as DbDocumentation[];
  },

  /**
   * Update documentation content
   */
  update(id: string, updates: Partial<Omit<DbDocumentation, 'id' | 'project_id' | 'created_at' | 'updated_at'>>): DbDocumentation | null {
    const db = getDatabase();
    const now = new Date().toISOString();

    const fields: string[] = [];
    const values: any[] = [];

    if (updates.title !== undefined) {
      fields.push('title = ?');
      values.push(updates.title);
    }
    if (updates.content !== undefined) {
      fields.push('content = ?');
      values.push(updates.content);
    }
    if (updates.section_type !== undefined) {
      fields.push('section_type = ?');
      values.push(updates.section_type);
    }
    if (updates.auto_generated !== undefined) {
      fields.push('auto_generated = ?');
      values.push(updates.auto_generated);
    }
    if (updates.source_metadata !== undefined) {
      fields.push('source_metadata = ?');
      values.push(updates.source_metadata);
    }
    if (updates.last_sync_at !== undefined) {
      fields.push('last_sync_at = ?');
      values.push(updates.last_sync_at);
    }

    if (fields.length === 0) {
      return this.getById(id);
    }

    fields.push('updated_at = ?');
    values.push(now);
    values.push(id);

    const stmt = db.prepare(`
      UPDATE documentation
      SET ${fields.join(', ')}
      WHERE id = ?
    `);

    stmt.run(...values);
    return this.getById(id);
  },

  /**
   * Delete documentation by ID
   */
  delete(id: string): boolean {
    const db = getDatabase();
    const stmt = db.prepare('DELETE FROM documentation WHERE id = ?');
    const result = stmt.run(id);
    return result.changes > 0;
  },

  /**
   * Delete all documentation for a project
   */
  deleteByProject(projectId: string): number {
    const db = getDatabase();
    const stmt = db.prepare('DELETE FROM documentation WHERE project_id = ?');
    const result = stmt.run(projectId);
    return result.changes;
  },

  /**
   * Get auto-generated documentation only
   */
  getAutoGenerated(projectId: string): DbDocumentation[] {
    const db = getDatabase();
    const stmt = db.prepare(`
      SELECT * FROM documentation
      WHERE project_id = ? AND auto_generated = 1
      ORDER BY section_type, title
    `);
    return stmt.all(projectId) as DbDocumentation[];
  },

  /**
   * Update sync timestamp
   */
  updateSyncTime(id: string): void {
    const db = getDatabase();
    const now = new Date().toISOString();
    const stmt = db.prepare(`
      UPDATE documentation
      SET last_sync_at = ?, updated_at = ?
      WHERE id = ?
    `);
    stmt.run(now, now, id);
  },

  /**
   * Get documentation that needs syncing (older than specified minutes)
   */
  getStale(projectId: string, minutesOld: number = 60): DbDocumentation[] {
    const db = getDatabase();
    const cutoffTime = new Date(Date.now() - minutesOld * 60 * 1000).toISOString();
    const stmt = db.prepare(`
      SELECT * FROM documentation
      WHERE project_id = ?
        AND auto_generated = 1
        AND (last_sync_at IS NULL OR last_sync_at < ?)
      ORDER BY section_type, title
    `);
    return stmt.all(projectId, cutoffTime) as DbDocumentation[];
  }
};
